from langchain.tools import tool
from langchain_core.messages import HumanMessage
from langchain_google_genai import ChatGoogleGenerativeAI
import pyautogui
import base64
import io
import os 


def screenshare_helper() -> str:
    """
    Capture the entire screen and return it as a base64 encoded string.
    Returns:
    str: Base64 encoded string of the screenshot in PNG format.
    """
    # Delete the existing screenshot if it exists
    if os.path.exists('hey.png'):
        os.remove('hey.png')
        print('hey.png deleted')
    # Capture screenshot of the entire screen
    screenshot = pyautogui.screenshot('hey.png')
    print(f'screenshot = {screenshot}')

def callback_llm(user_query_msg: str): 
    llm =  ChatGoogleGenerativeAI(model='gemini-1.5-flash-latest', stream=True, api_key=os.environ.get('gemini'), temperature=0.0,  convert_system_message_to_human=True,  max_output_tokens=4096)
    print(f'user_query_msg = {user_query_msg}')
    if os.path.exists('hey.png'):
        print(f'hey.png exists')
        image_path = os.path.abspath('hey.png')
        print(f'image_path = {image_path}')
        try:
            message = HumanMessage(
                content=[
        {
            "type": "text",
            "text": f"{user_query_msg}",
        }, 
        {"type": "image_url", "image_url": image_path},
                ]
            )
            os.remove('hey.png')
            return llm.invoke([message]).content
        except Exception as e:
            print(f'Error: {e}')
            return "I encountered an error processing your request. Please try again."
    else:
        return "No screenshot found. Please capture a screenshot first."

    

@tool
def screenshare_tool(user_query_msg: str = "check my screen", screenshare_msg: str = "sharing screen"):
    '''
    Useful when the user wants to ask any query regarding their screen.
    The user will ask a query related to their screen content, and you will answer based on what you see on the screen.
    The function will receive the content visible on the screen and you have to answer according to that content.
    
    Parameters:
    user_query_msg (str): The default user query message to check the screen. Default is "check my screen".
    screenshare_msg (str): The default message indicating that the screen is being shared. Default is "sharing screen".
    
    Returns:
    str: The response generated by the language model based on the screen content.
    '''
    screenshare_helper()
    return callback_llm(user_query_msg=user_query_msg)



